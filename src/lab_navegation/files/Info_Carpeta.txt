En este paquete van todos los scripts relacionados al control PI del Robot:
	- Dead reckoning
	- Controladores
	- Grafo
	- Pose_loader

mover_robot_a_destino -> descompone las poses que vienen en formato (x,y,theta) a desplazamientos en metros [(x,0), (0, theta), (y,0)]
aplicar_velocidad -> la lista obtenida anteriormente sera la señal de referencia del controlador.

Es el controlador quien publica ahora la velocidad que el robot debe tomar!! Además, el periodo lo definen los mensajes de la odoemtria,
por lo que no es necesario declarar un periodo (con time) dentro del script.

La saturacion es un V_o = min(limite, V_ctrl).

El nodo controlador recibe la referencia/set_point(pose) y la salida de la planta (odometry) y a la salida entrega la actuación (velocidad
del robot). 

Los controladores van a chocar porque poseen el mismo topico. Para ello le puede agregar un "_A" o "_B", pero Ros tiene la solución.
"/linea/state", de esta manera generas una jerarquia y diferencias que que nodo le llega.
Agreando en el launch un namespace='' para todos los topicos que levanta un nodo, diferenciandolos y no siendo necesario variar los nombres
de topicos cuando dos nodos ocupan el mismo.


Puede servirte:
for speed_command in speed_command_list:
      
      # Definimos el tiempo inicial de la tupla y creamos un tiempo actual de iteración
      time_initial = time.time()
      time_end = 0

      # Definimos el tiempo calculado en move_to_point para la tupla
      timer_period = float(speed_command[2])

      # Sentencio un while para enviar mensajes de forma iterativa hasta el tiempo solicitado
      while time_end - time_initial <= timer_period: 
        
        # Defino el mensaje y agrego las velocidades
        speed = Twist()
        speed.linear.x = float(speed_command[0])
        speed.angular.z = float(speed_command[1])
      
        # Publico en el tópico
        self.publish_velocity.publish(speed)
      
        
        # Seteo el periodo de cada mensaje, en este caso 10 Hz
        time.sleep(0.1)

        # Actualizo el tiempo actual de iteración
        time_end = time.time()
